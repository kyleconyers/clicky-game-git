{"ast":null,"code":"import _toConsumableArray from \"/Users/kylemac/Desktop/p/trae/Click-Game/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/kylemac/Desktop/p/trae/Click-Game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kylemac/Desktop/p/trae/Click-Game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kylemac/Desktop/p/trae/Click-Game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kylemac/Desktop/p/trae/Click-Game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kylemac/Desktop/p/trae/Click-Game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kylemac/Desktop/p/trae/Click-Game/src/App.js\";\nimport React, { Component } from \"react\";\nimport Cards from \"./components/Cards/cards\";\nimport NavBar from \"./components/Nav/navBar\";\nimport images from \"./images.json\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.handleImgClick = function (id, clicked) {\n      // When the image is clicked, take that image id and change the clicked boolean value to true\n      // Take the current score and add one beofe setting a new\n      var newArray = _this.state.images.map(function (image) {\n        return image;\n      }); // If the image clicked is = false then add 1 to the state.current score and shuffle the images. \n\n\n      if (_this.state.alreadyClicked.includes(id)) {\n        alert(\"You already clicked that one, press OK to restart\");\n      } else {\n        _this.setState({\n          currentScore: _this.state.currentScore + 1,\n          images: newArray,\n          // take a copy arr and then create a new array with the addeed new ID\n          alreadyClicked: [].concat(_toConsumableArray(_this.state.alreadyClicked), [id])\n        });\n      }\n\n      console.log(_this.state.alreadyClicked);\n    };\n\n    _this.random = function (arr) {\n      return arr.sort(function (a, b) {\n        return 0.5 - Math.random();\n      });\n    };\n\n    _this.state = {\n      images: images,\n      highScore: 0,\n      currentScore: 0,\n      alreadyClicked: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        highScore: this.state.highScore,\n        currentScore: this.state.currentScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"characterDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, this.random(this.state.images).map(function (image) {\n        return React.createElement(Cards, {\n          key: image.id,\n          id: image.id,\n          image: image.img,\n          clicked: image.clicked,\n          handleClick: _this2.handleImgClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/kylemac/Desktop/p/trae/Click-Game/src/App.js"],"names":["React","Component","Cards","NavBar","images","App","props","handleImgClick","id","clicked","newArray","state","map","image","alreadyClicked","includes","alert","setState","currentScore","console","log","random","arr","sort","a","b","Math","highScore","img"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAO,WAAP;;IAEMC,G;;;;;AAEJ,eAAaC,KAAb,EAAoB;AAAA;;AAAA;;AAClB,6EAAMA,KAAN;;AADkB,UAapBC,cAboB,GAaH,UAACC,EAAD,EAAKC,OAAL,EAAiB;AAChC;AAEA;AACA,UAAMC,QAAQ,GAAG,MAAKC,KAAL,CAAWP,MAAX,CAAkBQ,GAAlB,CAAsB,UAAAC,KAAK,EAAI;AAE9C,eAAOA,KAAP;AACD,OAHgB,CAAjB,CAJgC,CAUhC;;;AACA,UAAI,MAAKF,KAAL,CAAWG,cAAX,CAA0BC,QAA1B,CAAmCP,EAAnC,CAAJ,EAA4C;AAC1CQ,QAAAA,KAAK,CAAC,mDAAD,CAAL;AACD,OAFD,MAEO;AACL,cAAKC,QAAL,CAAc;AACZC,UAAAA,YAAY,EAAE,MAAKP,KAAL,CAAWO,YAAX,GAA0B,CAD5B;AAEZd,UAAAA,MAAM,EAAEM,QAFI;AAGZ;AACAI,UAAAA,cAAc,+BAAM,MAAKH,KAAL,CAAWG,cAAjB,IAAiCN,EAAjC;AAJF,SAAd;AAOD;;AAEDW,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKT,KAAL,CAAWG,cAAvB;AAGD,KAvCmB;;AAAA,UAyCpBO,MAzCoB,GAyCX,UAACC,GAAD,EAAU;AACjB,aAAQA,GAAG,CAACC,IAAJ,CAAS,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAAC,eAAO,MAAMC,IAAI,CAACL,MAAL,EAAb;AAA2B,OAApD,CAAR;AACD,KA3CmB;;AAElB,UAAKV,KAAL,GAAa;AACXP,MAAAA,MAAM,EAANA,MADW;AAEXuB,MAAAA,SAAS,EAAE,CAFA;AAGXT,MAAAA,YAAY,EAAE,CAHH;AAIXJ,MAAAA,cAAc,EAAE;AAJL,KAAb;AAFkB;AASnB;;;;6BAqCQ;AAAA;;AAEP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAI,KAAKH,KAAL,CAAWgB,SAAhC;AAA2C,QAAA,YAAY,EAAI,KAAKhB,KAAL,CAAWO,YAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAIE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGC,KAAKG,MAAL,CAAY,KAAKV,KAAL,CAAWP,MAAvB,EAA+BQ,GAA/B,CAAmC,UAAAC,KAAK;AAAA,eACvC,oBAAC,KAAD;AACA,UAAA,GAAG,EAAEA,KAAK,CAACL,EADX;AAEA,UAAA,EAAE,EAAEK,KAAK,CAACL,EAFV;AAGA,UAAA,KAAK,EAAEK,KAAK,CAACe,GAHb;AAIA,UAAA,OAAO,EAAEf,KAAK,CAACJ,OAJf;AAKA,UAAA,WAAW,EAAI,MAAI,CAACF,cALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADuC;AAAA,OAAxC,CAHD,CAJF,CADF;AAqBD;;;;EAvEeN,S;;AA0ElB,eAAeI,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Cards from \"./components/Cards/cards\";\nimport NavBar from \"./components/Nav/navBar\";\nimport images from \"./images.json\";\nimport \"./App.css\"\n\nclass App extends Component {\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      images,\n      highScore: 0,\n      currentScore: 0,\n      alreadyClicked: []\n\n    }\n  }\n\n  \n\n  handleImgClick = (id, clicked) => { \n    // When the image is clicked, take that image id and change the clicked boolean value to true\n    \n    // Take the current score and add one beofe setting a new\n    const newArray = this.state.images.map(image => {\n  \n      return image\n    });\n    \n\n    // If the image clicked is = false then add 1 to the state.current score and shuffle the images. \n    if (this.state.alreadyClicked.includes(id)) {\n      alert(\"You already clicked that one, press OK to restart\")\n    } else {\n      this.setState({\n        currentScore: this.state.currentScore + 1,\n        images: newArray,\n        // take a copy arr and then create a new array with the addeed new ID\n        alreadyClicked: [...this.state.alreadyClicked, id]\n  \n      });\n    }\n\n    console.log(this.state.alreadyClicked);\n\n    \n  }\n\n  random = (arr)  => {\n    return (arr.sort(function(a, b) {return 0.5 - Math.random()}));\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n      {/* Render the Navbar functional component and pass it the highscore/current score state as props */}\n        <NavBar highScore = {this.state.highScore} currentScore = {this.state.currentScore} />\n        {/* Create a new div for the img card to add flex CSS */}\n        <div className=\"characterDiv\">\n        {/* Render each img from the images.json file in random order */}\n        \n        {this.random(this.state.images).map(image => (\n          <Cards  \n          key={image.id}\n          id={image.id}\n          image={image.img}\n          clicked={image.clicked}\n          handleClick = {this.handleImgClick}\n          \n          />\n        ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}