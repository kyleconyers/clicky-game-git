{"map":"{\"version\":3,\"sources\":[\"/Users/kylemac/Desktop/classwork/uploads/clicky-game-git/src/components/Cards/cards.js\",\"/Users/kylemac/Desktop/classwork/uploads/clicky-game-git/src/components/Nav/navBar.js\",\"/Users/kylemac/Desktop/classwork/uploads/clicky-game-git/src/App.js\",\"/Users/kylemac/Desktop/classwork/uploads/clicky-game-git/src/serviceWorker.js\",\"/Users/kylemac/Desktop/classwork/uploads/clicky-game-git/src/index.js\"],\"names\":[\"Cards\",\"props\",\"react_default\",\"a\",\"createElement\",\"className\",\"style\",\"width\",\"onClick\",\"handleClick\",\"id\",\"clicked\",\"src\",\"image\",\"alt\",\"NavBar\",\"href\",\"height\",\"currentScore\",\"highScore\",\"App\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"handleImgClick\",\"newArray\",\"state\",\"images\",\"map\",\"alreadyClicked\",\"includes\",\"alert\",\"setState\",\"concat\",\"toConsumableArray\",\"console\",\"log\",\"random\",\"arr\",\"sort\",\"b\",\"Math\",\"_this2\",\"navBar\",\"cards\",\"key\",\"img\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"oQAeeA,EATA,SAACC,GAAD,OACZC,EAAAC,EAAAC,cAAA,MAAA,KACCF,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OAAOC,MAAO,CAACC,MAAO,MACjCL,EAAAC,EAAAC,cAAA,MAAA,CAAKI,QAAW,WAAA,OAAMP,EAAMQ,YAAYR,EAAMS,GAAIT,EAAMU,UAAUN,UAAU,eAAeO,IAAKX,EAAMY,MAAOC,IAAI,QCS1GC,EAhBA,SAACd,GAAD,OACRC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,IAAA,CAAGC,UAAU,eAAeW,KAAK,KAC/Bd,EAAAC,EAAAC,cAAA,MAAA,CAAKQ,IAAI,6CAA6CL,MAAM,KAAKU,OAAO,KAAKZ,UAAU,2BAA2BS,IAAI,KADxH,eAGAZ,EAAAC,EAAAC,cAAA,KAAA,CAAIC,UAAU,yCACZH,EAAAC,EAAAC,cAAA,KAAA,KAAA,UAAYH,EAAMiB,cAClBhB,EAAAC,EAAAC,cAAA,KAAA,KAAA,cAAgBH,EAAMkB,sBCsEnBC,qBAxEb,SAAAA,EAAanB,GAAO,IAAAoB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAClBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMvB,KAYR2B,eAAiB,SAAClB,EAAIC,GAIpB,IAAMkB,EAAWR,EAAKS,MAAMC,OAAOC,IAAI,SAAAnB,GAErC,OAAOA,IAKLQ,EAAKS,MAAMG,eAAeC,SAASxB,GACrCyB,MAAM,qDAENd,EAAKe,SAAS,CACZlB,aAAcG,EAAKS,MAAMZ,aAAe,EACxCa,OAAQF,EAERI,eAAc,GAAAI,OAAAf,OAAAgB,EAAA,EAAAhB,CAAMD,EAAKS,MAAMG,gBAAjB,CAAiCvB,MAKnD6B,QAAQC,IAAInB,EAAKS,MAAMG,iBApCLZ,EAyCpBoB,OAAS,SAACC,GACR,OAAQA,EAAIC,KAAK,SAASxC,EAAGyC,GAAI,MAAO,GAAMC,KAAKJ,YAxCnDpB,EAAKS,MAAQ,CACXC,OAAAA,EACAZ,UAAW,EACXD,aAAc,EACde,eAAgB,IANAZ,wEA8CX,IAAAyB,EAAAtB,KAEP,OACEtB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAC2C,EAAD,CAAQ5B,UAAaK,KAAKM,MAAMX,UAAWD,aAAgBM,KAAKM,MAAMZ,eAEtEhB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,gBAGdmB,KAAKiB,OAAOjB,KAAKM,MAAMC,QAAQC,IAAI,SAAAnB,GAAK,OACvCX,EAAAC,EAAAC,cAAC4C,EAAD,CACAC,IAAKpC,EAAMH,GACXA,GAAIG,EAAMH,GACVG,MAAOA,EAAMqC,IACbvC,QAASE,EAAMF,QACfF,YAAeqC,EAAKlB,4BAhEZuB,EAAAA,YCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,EAAAA,EAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from 'react';\\n\\n\\n// Each character needs to be loaded onto the page in random order.\\n\\n\\nconst  Cards = (props) => \\n  (<div>\\n    <div className=\\\"card\\\" style={{width: 280}}>\\n        <img onClick = {() => props.handleClick(props.id, props.clicked)} className=\\\"card-img-top\\\" src={props.image} alt=\\\"\\\"/>\\n    </div>\\n    \\n        </div>\\n    );\\n\\nexport default Cards;\\n\",\"import React from \\\"react\\\";\\n\\nconst NavBar = (props) =>\\n      (<div className=\\\"App\\\">\\n        <nav className=\\\"navbar navbar-dark bg-dark\\\">\\n          <a className=\\\"navbar-brand\\\" href=\\\"/\\\">\\n            <img src=\\\"/docs/4.0/assets/brand/bootstrap-solid.svg\\\" width=\\\"30\\\" height=\\\"30\\\" className=\\\"d-inline-block align-top\\\" alt=\\\"\\\"/>Clicky Game\\n          </a>\\n          <ul className=\\\"nav navbar-nav navbar-right text-info\\\">\\n            <li>Score: {props.currentScore}</li>\\n            <li>Top Score: {props.highScore}</li>\\n          </ul>\\n        </nav>\\n      </div>)\\n    \\n  \\n\\n\\nexport default NavBar;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport Cards from \\\"./components/Cards/cards\\\";\\nimport NavBar from \\\"./components/Nav/navBar\\\";\\nimport images from \\\"./images.json\\\";\\nimport \\\"./App.css\\\"\\n\\nclass App extends Component {\\n\\n  constructor (props) {\\n    super(props)\\n    this.state = {\\n      images,\\n      highScore: 0,\\n      currentScore: 0,\\n      alreadyClicked: []\\n\\n    }\\n  }\\n\\n  \\n\\n  handleImgClick = (id, clicked) => { \\n    // When the image is clicked, take that image id and change the clicked boolean value to true\\n    \\n    // Take the current score and add one beofe setting a new\\n    const newArray = this.state.images.map(image => {\\n  \\n      return image\\n    });\\n    \\n\\n    // If the image clicked is = false then add 1 to the state.current score and shuffle the images. \\n    if (this.state.alreadyClicked.includes(id)) {\\n      alert(\\\"You already clicked that one, press OK to restart\\\")\\n    } else {\\n      this.setState({\\n        currentScore: this.state.currentScore + 1,\\n        images: newArray,\\n        // take a copy arr and then create a new array with the addeed new ID\\n        alreadyClicked: [...this.state.alreadyClicked, id]\\n  \\n      });\\n    }\\n\\n    console.log(this.state.alreadyClicked);\\n\\n    \\n  }\\n\\n  random = (arr)  => {\\n    return (arr.sort(function(a, b) {return 0.5 - Math.random()}));\\n  }\\n\\n\\n  render() {\\n\\n    return (\\n      <div className=\\\"App\\\">\\n      {/* Render the Navbar functional component and pass it the highscore/current score state as props */}\\n        <NavBar highScore = {this.state.highScore} currentScore = {this.state.currentScore} />\\n        {/* Create a new div for the img card to add flex CSS */}\\n        <div className=\\\"characterDiv\\\">\\n        {/* Render each img from the images.json file in random order */}\\n        \\n        {this.random(this.state.images).map(image => (\\n          <Cards  \\n          key={image.id}\\n          id={image.id}\\n          image={image.img}\\n          clicked={image.clicked}\\n          handleClick = {this.handleImgClick}\\n          \\n          />\\n        ))}\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\nimport 'bootstrap/dist/css/bootstrap.min.css';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{10:function(e,a,t){e.exports=t(22)},16:function(e,a,t){},18:function(e,a,t){},22:function(e,a,t){\"use strict\";t.r(a);var n=t(0),i=t.n(n),c=t(2),r=t.n(c),s=(t(16),t(7)),l=t(3),o=t(4),m=t(8),d=t(5),g=t(9),u=function(e){return i.a.createElement(\"div\",null,i.a.createElement(\"div\",{className:\"card\",style:{width:280}},i.a.createElement(\"img\",{onClick:function(){return e.handleClick(e.id,e.clicked)},className:\"card-img-top\",src:e.image,alt:\"\"})))},h=function(e){return i.a.createElement(\"div\",{className:\"App\"},i.a.createElement(\"nav\",{className:\"navbar navbar-dark bg-dark\"},i.a.createElement(\"a\",{className:\"navbar-brand\",href:\"/\"},i.a.createElement(\"img\",{src:\"/docs/4.0/assets/brand/bootstrap-solid.svg\",width:\"30\",height:\"30\",className:\"d-inline-block align-top\",alt:\"\"}),\"Clicky Game\"),i.a.createElement(\"ul\",{className:\"nav navbar-nav navbar-right text-info\"},i.a.createElement(\"li\",null,\"Score: \",e.currentScore),i.a.createElement(\"li\",null,\"Top Score: \",e.highScore))))},k=t(6),v=(t(18),function(e){function a(e){var t;return Object(l.a)(this,a),(t=Object(m.a)(this,Object(d.a)(a).call(this,e))).handleImgClick=function(e,a){var n=t.state.images.map(function(e){return e});t.state.alreadyClicked.includes(e)?alert(\"You already clicked that one, press OK to restart\"):t.setState({currentScore:t.state.currentScore+1,images:n,alreadyClicked:[].concat(Object(s.a)(t.state.alreadyClicked),[e])}),console.log(t.state.alreadyClicked)},t.random=function(e){return e.sort(function(e,a){return.5-Math.random()})},t.state={images:k,highScore:0,currentScore:0,alreadyClicked:[]},t}return Object(g.a)(a,e),Object(o.a)(a,[{key:\"render\",value:function(){var e=this;return i.a.createElement(\"div\",{className:\"App\"},i.a.createElement(h,{highScore:this.state.highScore,currentScore:this.state.currentScore}),i.a.createElement(\"div\",{className:\"characterDiv\"},this.random(this.state.images).map(function(a){return i.a.createElement(u,{key:a.id,id:a.id,image:a.img,clicked:a.clicked,handleClick:e.handleImgClick})})))}}]),a}(n.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));t(20);r.a.render(i.a.createElement(v,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},6:function(e){e.exports=[{id:1,name:\"one\",img:\"./assets/img/one.jpg\",clicked:!1},{id:2,name:\"two\",img:\"./assets/img/two.jpg\",clicked:!1},{id:3,name:\"three\",img:\"./assets/img/three.jpg\",clicked:!1},{id:4,name:\"four\",img:\"./assets/img/four.png\",clicked:!1},{id:5,name:\"five\",img:\"./assets/img/five.jpg\",clicked:!1},{id:6,name:\"six\",img:\"./assets/img/six.jpg\",clicked:!1},{id:7,name:\"seven\",img:\"./assets/img/seven.jpg\",clicked:!1},{id:8,name:\"eight\",img:\"./assets/img/eight.jpg\",clicked:!1},{id:9,name:\"nine\",img:\"./assets/img/nine.png\",clicked:!1},{id:10,name:\"ten\",img:\"./assets/img/ten.jpg\",clicked:!1},{id:11,name:\"eleven\",img:\"./assets/img/eleven.jpg\",clicked:!1},{id:12,name:\"twelve\",img:\"./assets/img/twelve.png\",clicked:!1}]}},[[10,2,1]]]);","extractedComments":[]}